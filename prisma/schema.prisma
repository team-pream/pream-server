generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProviderType {
  KAKAO
}

enum PetType {
  DOG
  CAT
}

enum ProductStatusType {
  AVAILABLE
  SOLD_OUT
  RESERVED
}

enum OrderStatusType {
  PAYMENT_PENDING    // 결제대기
  PAYMENT_COMPLETED  // 결제완료
  PAYMENT_FAILED     // 결제실패
  ORDER_CANCELED     // 주문취소
  REFUND_REQUESTED   // 환불신청
  REFUND_COMPLETED   // 환불완료
}

enum PaymentMethodType {
  CARD              // 카드
  VIRTUAL_ACCOUNT    // 가상계좌
  SIMPLE_PAYMENT     // 간편결제
  MOBILE            // 휴대폰 결제
  BANK_TRANSFER     // 계좌이체
  CULTURE_GIFT_CARD // 문화상품권
  BOOK_GIFT_CARD    // 도서문화상품권
  GAME_GIFT_CARD    // 게임문화상품권
  INTL_SIMPLE_PAYMENT // 해외간편결제
}

model User {
  id           String   @id @default(uuid())
  provider     ProviderType?  
  providerId   String?  
  username     String
  refreshToken String? 
  phone        String?
  address      String?
  chattingLink String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  pets         Pet[]
  products     Product[]
  orders       Order[]
  likes        Like[]
}

model Pet {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String
  image     String?
  type      PetType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Category {
  id   Int      @id @default(autoincrement())
  name String
  types PetType[]

  products Product[]
}

model Product {
  id          Int        @id @default(autoincrement())
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  seller      User       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId    String
  name        String
  price       Int
  status      ProductStatusType
  images      String[]  
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  orders      Order[]
  likes       Like[]
}

model Order {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  status          OrderStatusType
  paymentAmount   Int
  paymentMethod   PaymentMethodType
  shippingAddress String
  phone           String
  product         Product  @relation(fields: [productId], references: [id])
  productId       Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, productId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
