generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  provider     ProviderType?
  providerId   String?       @unique
  username     String
  nickname     String?       @unique
  refreshToken String?
  phone        String?
  address      String?
  email        String?       @unique
  contact      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  likes        Like[]
  orders       Order[]
  pets         Pet[]
  products     Product[]
}

model Pet {
  id        String   @id @default(uuid())
  userId    String
  name      String
  image     String?
  petType   PetType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  icon      String
  petType   PetType[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          Int               @id @default(autoincrement())
  categoryId  Int
  sellerId    String
  name        String
  price       Int
  status      ProductStatusType
  images      String[]
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  likes       Like[]
  orders      Order[]
  category    Category          @relation(fields: [categoryId], references: [id])
  seller      User              @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Order {
  id              Int               @id @default(autoincrement())
  userId          String
  status          OrderStatusType
  paymentAmount   Int
  paymentMethod   PaymentMethodType
  shippingAddress String
  phone           String
  productId       Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  product         Product           @relation(fields: [productId], references: [id])
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, productId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

enum ProviderType {
  KAKAO
}

enum PetType {
  DOG
  CAT
}

enum ProductStatusType {
  AVAILABLE
  SOLD_OUT
  RESERVED
}

enum OrderStatusType {
  PAYMENT_PENDING
  PAYMENT_COMPLETED
  PAYMENT_FAILED
  ORDER_CANCELED
  REFUND_REQUESTED
  REFUND_COMPLETED
}

enum PaymentMethodType {
  CARD
  VIRTUAL_ACCOUNT
  SIMPLE_PAYMENT
  MOBILE
  BANK_TRANSFER
  CULTURE_GIFT_CARD
  BOOK_GIFT_CARD
  GAME_GIFT_CARD
  INTL_SIMPLE_PAYMENT
}
